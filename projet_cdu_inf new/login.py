from flask import Blueprint, request, redirect, render_template, flash, url_for, session
from ldap3 import Server, Connection, NTLM
from db import get_connection
import oracledb

login_bp = Blueprint('login', __name__)

# Param√®tres de connexion
dsn = '10.37.22.21:1521/L1ZGE1.world'
serveur_ad = '10.114.106.13'
domaine = 'corp.sonatrach.dz'

# Initialisation du client Oracle
try:
    oracledb.init_oracle_client(lib_dir=r"C:\oracle\instantclient_23_8")
    print("‚úÖ Oracle Instant Client initialis√©.")
except Exception as e:
    print(f"‚ö†Ô∏è Impossible d'initialiser Oracle Instant Client : {e}")

# Fonction de v√©rification Active Directory
def verifier_ad(username, password):
    try:
        server = Server(f'ldap://{serveur_ad}')
        print(f"üü° Connexion √† l'AD sur : ldap://{serveur_ad}")

        conn = Connection(
            server,
            user=f'{domaine}\\{username}',
            password=password,
            authentication=NTLM
        )

        if not conn.bind():
            print("‚ùå √âchec authentification AD")
            print(f"üìÉ D√©tail LDAP : {conn.result}")
            return False

        print("‚úÖ Authentification AD r√©ussie")
        conn.unbind()
        return True

    except Exception as e:
        print(f"‚ùå Erreur de connexion √† l'AD : {e}")
        return False

# Fonction de v√©rification Oracle
def verifier_oracle(username, password):
    try:
        print(f"üü° Tentative connexion Oracle avec user : {username}")
        conn = oracledb.connect(user=username, password=password, dsn=dsn)
        conn.close()
        print("‚úÖ Connexion Oracle r√©ussie")
        return True

    except oracledb.DatabaseError as e:
        error, = e.args
        print(f"‚ùå Erreur Oracle : {error.message}")
        return False

# Route index
@login_bp.route('/', methods=['GET'])
def index():
    return render_template("index.html")

# Route de login
@login_bp.route('/login', methods=['POST'])
def login():
    username = request.form['username']
    password = request.form['password']

    print(f"üü° Tentative login avec utilisateur : {username}")

    # 1Ô∏è‚É£ V√©rification Active Directory
    if not verifier_ad(username, password):
        flash("‚ùå √âchec authentification Active Directory", "error")
        return redirect('/')

    # 2Ô∏è‚É£ V√©rification Oracle
    if not verifier_oracle(username, password):
        flash("‚ùå √âchec authentification Oracle", "error")
        return redirect('/')

    # 3Ô∏è‚É£ R√©cup√©ration du r√¥le applicatif Oracle
    try:
        conn = get_connection()
        cursor = conn.cursor()

        print("üîç Requ√™te Oracle pour r√©cup√©rer le r√¥le applicatif...")

        cursor.execute("""
            SELECT r.ID_ROLE 
            FROM DBA_ROLE_PRIVS d
            JOIN CDUGL1Z.MGUSER r ON d.GRANTED_ROLE = r.ID_ROLE
            WHERE d.GRANTEE = :username
            AND ROWNUM = 1
        """, {"username": username.upper()})

        result = cursor.fetchone()

        if result:
            id_role = result[0]
            print(f"‚úÖ R√¥le Oracle trouv√© : {id_role}")

            session['username'] = username
            session['id_role'] = id_role

            # Redirection selon le r√¥le
            if id_role == 'INF_MANAGER':
                session['id_ecran'] = 'RECAP_GLOBAL'
                print("‚û°Ô∏è Redirection vers recap_global")
                return redirect(url_for('inf.recap_global'))

            elif id_role == 'INF_BDD':
                session['id_ecran'] = 'INF'
                print("‚û°Ô∏è Redirection vers formulaire INF")
                return redirect(url_for('inf.show_form'))

            else:
                print("‚ö†Ô∏è R√¥le non autoris√© pour cette application")
                flash("‚ö†Ô∏è Vous n'avez pas acc√®s √† cette application", "error")
                return redirect('/')

        else:
            print("‚ö†Ô∏è Aucun r√¥le applicatif trouv√© dans MGUSER")
            flash("‚ö†Ô∏è Aucun acc√®s applicatif trouv√©", "error")
            return redirect('/')

    except oracledb.DatabaseError as e:
        error, = e.args
        print(f"‚ùå Erreur Oracle lors de la r√©cup√©ration du r√¥le : {error.message}")
        flash(f"‚ùå Erreur Oracle : {error.message}", "error")
        return redirect('/')

    finally:
        if 'cursor' in locals():
            cursor.close()
        if 'conn' in locals():
            conn.close()
